(in-package #:my-editor)

(defun activity-widget-update-dragdrop-side (w x y)
  (let* ((rx (- x (+ (gui:widget-layer-x w) (* 0.5 (gui:widget-width w)))))
         (ry (- y (+ (gui:widget-layer-y w) (* 0.5 (gui:widget-height w)))))
         (x+y>0 (> (+ rx ry) 0))
         (x+y<0 (not x+y>0))
         (x-y>0 (> (- rx ry) 0))
         (x-y<0 (not x-y>0)))
    (cond
     ((and x+y<0 x-y<0) (setf (activity-widget-dragdrop-side w) :left))
     ((and x+y>0 x-y>0) (setf (activity-widget-dragdrop-side w) :right))
     ((and x+y<0 x-y>0) (setf (activity-widget-dragdrop-side w) :top))
     ((and x+y>0 x-y<0) (setf (activity-widget-dragdrop-side w) :bottom))))
  (values))

(defstruct (activity-widget (:include gui:widget)
                            (:copier nil)
                            (:constructor make-activity-widget (&aux (hitp #'gui:default-widget-hitp))))
  (dragdrop-side nil :type (member nil :left :right :top :bottom)))

(defun w-activity (ui activity on-split)
  (let ((gui-window (api:activity-gui-window activity))
        (widget (make-activity-widget)))
    (gui:initialize-widget ui widget)
    (setf (slot-value activity 'api::container-widget) widget)
    (gui:set-window-layer ui gui-window (gui:current-layer ui))
    (sdet:on-cleanup (gui:sdet-context ui)
      (setf (slot-value activity 'api::container-widget) nil)
      (gui:set-window-layer ui gui-window nil)
      (gui:destroy-widget widget))
    (yogalayout:node-style-set-flex-grow (gui:widget-yoga-node widget) 1.0)
    (setf (gui:widget-on-render-begin widget)
      (lambda (ui widget)
        (let ((blend2d-ctx (gui:layer-context (gui:current-layer ui)))
              (rect (gui:alloc-blend2d-rect ui))
              (x0 (coerce (gui:widget-yoga-x widget) 'double-float))
              (y0 (coerce (gui:widget-yoga-y widget) 'double-float))
              (w0 (coerce (gui:widget-width widget) 'double-float))
              (h0 (coerce (gui:widget-height widget) 'double-float)))
          (setf (%blend2d:rect.x rect) x0)
          (setf (%blend2d:rect.y rect) y0)
          (setf (%blend2d:rect.w rect) w0)
          (setf (%blend2d:rect.h rect) h0)
          ; (%blend2d:context-fill-rect-d-rgba32 (gui:layer-context (gui:current-layer ui)) rect (api:colors-background ui))
          (%blend2d:context-save blend2d-ctx (cffi:null-pointer))
          (%blend2d:context-clip-to-rect-d blend2d-ctx rect)
          (gui:render-window ui gui-window)
          (%blend2d:context-restore blend2d-ctx (cffi:null-pointer))
          (when (activity-widget-dragdrop-side widget)
                (multiple-value-bind (x1 y1 w1 h1)
                    (let ((hw (* 0.5d0 w0))
                          (hh (* 0.5d0 h0)))
                      (ecase (activity-widget-dragdrop-side widget)
                        (:left (values x0 y0 hw h0))
                        (:right (values (+ x0 hw) y0 hw h0))
                        (:top (values x0 y0 w0 hh))
                        (:bottom (values x0 (+ y0 hh) w0 hh))))
                  (setf (%blend2d:rect.x rect) x1)
                  (setf (%blend2d:rect.y rect) y1)
                  (setf (%blend2d:rect.w rect) w1)
                  (setf (%blend2d:rect.h rect) h1)
                  (%blend2d:context-fill-rect-d-rgba32 (gui:layer-context (gui:current-layer ui)) rect #x88000000)))
          (gui:free-blend2d-rect ui rect))
        (values)))
    (setf (gui:widget-on-drag-enter widget)
      (lambda (ui widget x y)
        (if (typep (gui:dragged-value ui) 'api:activity)
            (progn
             (activity-widget-update-dragdrop-side widget x y)
             t)
            (api:on-drag-enter ui activity x y))))
    (setf (gui:widget-on-drag-move widget)
      (lambda (ui widget x y)
        (if (typep (gui:dragged-value ui) 'api:activity)
            (progn
             (activity-widget-update-dragdrop-side widget x y)
             t)
            (api:on-drag-move ui activity x y))))
    (setf (gui:widget-on-drag-leave widget)
      (lambda (ui widget)
        (if (typep (gui:dragged-value ui) 'api:activity)
            (setf (activity-widget-dragdrop-side widget) nil)
            (api:on-drag-leave ui activity))
        (values)))
    (setf (gui:widget-on-drag-drop widget)
      (lambda (ui widget)
        (if (typep (gui:dragged-value ui) 'api:activity)
            (progn
             (funcall on-split (activity-widget-dragdrop-side widget))
             t)
            (api:on-drag-drop ui activity))))
    (setf (gui:widget-on-layout-changed widget)
      (lambda (ui widget)
        (let ((x (gui:widget-layer-x widget))
              (y (gui:widget-layer-y widget))
              (w (gui:widget-width widget))
              (h (gui:widget-height widget)))
          (gui:set-window-layout gui-window
                                 (coerce x 'double-float)
                                 (coerce y 'double-float)
                                 (coerce w 'double-float)
                                 (coerce h 'double-float))
          (api:on-layout ui activity x y w h))
        (values)))
    (gui:set-window-focus-recieved-handler gui-window
                                           (lambda (ui window)
                                             (declare (ignore window))
                                             (api:on-focus-recieved ui activity)
                                             (values)))
    (gui:set-window-focus-lost-handler gui-window
                                       (lambda (ui window)
                                         (declare (ignore window))
                                         (api:on-focus-lost ui activity)
                                         (values)))
    (setf (gui:widget-cursor widget)
      (lambda (ui widget x y)
        (declare (ignore ui))
        (if (functionp (api:activity-cursor activity))
            (funcall (api:activity-cursor activity) (- x (gui:widget-layer-x widget)) (- y (gui:widget-layer-y widget)))
            (api:activity-cursor activity))))
    (setf (gui:widget-on-mouse-move widget)
      (lambda (ui widget x y other)
        (declare (ignore widget))
        (api:on-mouse-move ui activity x y other)))
    (setf (gui:widget-on-mouse-scroll widget)
      (lambda (ui widget x y sx sy other)
        (declare (ignore widget))
        (api:on-mouse-scroll ui activity x y sx sy other)))
    (setf (gui:widget-on-mouse-down-left widget)
      (lambda (ui widget x y other)
        (declare (ignore widget))
        (api:on-mouse-down-left ui activity x y other)))
    (setf (gui:widget-on-mouse-up-left widget)
      (lambda (ui widget x y other)
        (declare (ignore widget))
        (api:on-mouse-up-left ui activity x y other)))
    (setf (gui:widget-on-mouse-down-right widget)
      (lambda (ui widget x y other)
        (declare (ignore widget))
        (api:on-mouse-down-right ui activity x y other)))
    (setf (gui:widget-on-mouse-up-right widget)
      (lambda (ui widget x y other)
        (declare (ignore widget))
        (api:on-mouse-up-right ui activity x y other)))
    (setf (gui:widget-on-mouse-down-middle widget)
      (lambda (ui widget x y other)
        (declare (ignore widget))
        (api:on-mouse-down-middle ui activity x y other)))
    (setf (gui:widget-on-mouse-up-middle widget)
      (lambda (ui widget x y other)
        (declare (ignore widget))
        (api:on-mouse-up-middle ui activity x y other)))
    (values)))

; (defstruct (activity-separator-widget (:include gui:widget)
;                                       (:copier nil)
;                                       (:constructor make-activity-separator-widget (&aux (hitp #'gui:default-widget-hitp))))
;   (drag-mouse-start 0.0 :type single-float)
;   (drag-middle-start 0.0 :type single-float)
;   (drag-active nil :type boolean))

; (defun w-activity-separator (ui node)
;   (let ((widget (make-activity-separator-widget))
;         (axis (activity-tree-node-axis node)))
;     (gui:initialize-widget ui widget)
;     (sdet:on-cleanup (gui:sdet-context ui)
;       (gui:destroy-widget widget)
;       (values))
;     (let ((yoga-node (gui:widget-yoga-node widget)))
;       (if (eq :x axis)
;           (progn
;            (yogalayout:node-style-set-width yoga-node 2.0)
;            (yogalayout:node-style-set-height-percent yoga-node 100.0))
;           (progn
;            (yogalayout:node-style-set-width-percent yoga-node 100.0)
;            (yogalayout:node-style-set-height yoga-node 2.0))))
;     (setf (gui:widget-on-render-begin widget)
;       (lambda (ui widget)
;         (let ((rect (gui:alloc-blend2d-rect ui)))
;           (setf (%blend2d:rect.x rect) (coerce (gui:widget-yoga-x widget) 'double-float))
;           (setf (%blend2d:rect.y rect) (coerce (gui:widget-yoga-y widget) 'double-float))
;           (setf (%blend2d:rect.w rect) (coerce (gui:widget-width widget) 'double-float))
;           (setf (%blend2d:rect.h rect) (coerce (gui:widget-height widget) 'double-float))
;           (%blend2d:context-fill-rect-d-rgba32 (gui:layer-context (gui:current-layer ui)) rect #xFF777777)
;           (gui:free-blend2d-rect ui rect))
;         (values)))
;     (setf (gui:widget-cursor widget) (if (eq :x axis) :move-x :move-y))
;     (setf (gui:widget-on-mouse-down-left widget)
;       (lambda (ui widget x y other)
;         (declare (ignore other))
;         (gui:own-mouse ui widget)
;         (setf (activity-separator-widget-drag-active widget) t)
;         (setf (activity-separator-widget-drag-mouse-start widget)
;           (if (eq :x axis)
;               x
;               y))
;         (setf (activity-separator-widget-drag-middle-start widget)
;           (sdet:unobserved (gui:sdet-context ui)
;             (funcall (activity-tree-node-get-middle node))))
;         (values)))
;     (let ((calc-new-middle
;            (lambda (widget x y)
;              (max 0.0 (min 1.0 (+ (activity-separator-widget-drag-middle-start widget)
;                                   (/ (- (if (eq :x axis) x y)
;                                         (activity-separator-widget-drag-mouse-start widget))
;                                      (max 1.0
;                                        (if (eq :x axis)
;                                            (gui:widget-width (gui:widget-parent widget))
;                                            (gui:widget-height (gui:widget-parent widget)))))))))))
;       (setf (gui:widget-on-mouse-move widget)
;         (lambda (ui widget x y other)
;           (declare (ignore ui other))
;           (when (activity-separator-widget-drag-active widget)
;                 (funcall (activity-tree-node-set-middle node)
;                   (funcall calc-new-middle widget x y)))
;           (values)))
;       (setf (gui:widget-on-mouse-up-left widget)
;         (lambda (ui widget x y other)
;           (declare (ignore other))
;           (when (activity-separator-widget-drag-active widget)
;                 (gui:disown-mouse ui widget)
;                 (setf (activity-separator-widget-drag-active widget) nil)
;                 (funcall (activity-tree-node-set-middle node)
;                   (funcall calc-new-middle widget x y)))
;           (values)))
;       (setf (gui:widget-on-mouse-ownership-lost widget)
;         (lambda (ui widget)
;           (declare (ignore ui))
;           (setf (activity-separator-widget-drag-active widget) nil)
;           (values))))
;     (values)))

(defstruct (activity-tab-widget (:include gui:widget)
                                (:copier nil)
                                (:constructor make-activity-tab-widget (&aux (hitp #'gui:default-widget-hitp))))
  (background-visual))

(defstruct (activity-tab-drag-horz (:copier nil)
                                   (:predicate nil)
                                   (:constructor make-activity-tab-drag-horz ()))
  (active nil :type boolean)
  (index 0 :type fixnum)
  (dragged-widget nil :type (or null gui:widget))
  (mouse-base-x 0.0 :type single-float)
  (mouse-base-y 0.0 :type single-float)
  (mouse-x 0.0 :type single-float)
  (mouse-y 0.0 :type single-float))

(defun activity-tab-drag-horz-offset-x (st)
  (- (activity-tab-drag-horz-mouse-x st)
     (activity-tab-drag-horz-mouse-base-x st)))

(defun yoga-center-x (yoga-node)
  (+ (yogalayout:node-layout-get-left yoga-node)
     (* 0.5 (yogalayout:node-layout-get-width yoga-node))))

(defconstant +activity-drag-vert-break-threshold+ 40)

(defun w-activity-tab (ui activity index get-selected-index set-selected-index horz-drag-state
                          subscribe-horz-drag-state notify-horz-drag-state stop-horz-drag close)
  (let ((widget (make-activity-tab-widget)))
    (gui:initialize-widget ui
                           widget
                           :z-index (lambda (widget)
                                      (declare (ignore widget))
                                      (lambda ()
                                        (if (= index (funcall get-selected-index)) 2 0)))
                           :position-type yogalayout:+position-type-relative+)
    (sdet:on-cleanup (gui:sdet-context ui)
      (gui:destroy-widget widget)
      (values))
    (let ((yoga-node (gui:widget-yoga-node widget)))
      (yogalayout:node-style-set-margin yoga-node yogalayout:+edge-top+ 5.0)
      (yogalayout:node-style-set-margin yoga-node yogalayout:+edge-horizontal+ 4.5)
      (yogalayout:node-style-set-margin yoga-node yogalayout:+edge-bottom+ 6.0)
      (yogalayout:node-style-set-padding yoga-node yogalayout:+edge-all+ 5.5)
      (yogalayout:node-style-set-justify-content yoga-node yogalayout:+justify-center+)
      (yogalayout:node-style-set-align-items yoga-node yogalayout:+align-center+))
    (gui:append-children ui
                         widget
                         (lambda (widget)
                           (declare (ignore widget))
                           ; (sdet:make-effect (gui:sdet-context ui)
                           (gui:w-label :ui ui
                                        :cursor nil
                                        :z-index (if (= index (funcall get-selected-index)) 3 1)
                                        :text (api:get-activity-title (funcall activity))
                                        :font-size 15.0
                                        :text-style (if (= index (funcall get-selected-index))
                                                        (api:colors-title-active ui)
                                                        (api:colors-title ui))))) ; )
    (sdet:make-effect (gui:sdet-context ui)
      (setf (activity-tab-widget-background-visual widget)
        (gui:update-visual (gui:v-rectangle :fill-style (api:colors-fill-dispatch ui widget)
                                            :border-style (if (= index (funcall get-selected-index)) (api:colors-border ui) nil)
                                            :border-width (if (= index (funcall get-selected-index)) 3.0 nil))
                           (activity-tab-widget-background-visual widget)))
      (values))
    (setf (gui:widget-on-render-begin widget)
      (lambda (ui widget)
        (gui:render-visual ui (activity-tab-widget-background-visual widget)
                           (coerce (gui:widget-yoga-x widget) 'double-float)
                           (coerce (gui:widget-yoga-y widget) 'double-float)
                           (coerce (gui:widget-width widget) 'double-float)
                           (coerce (gui:widget-height widget) 'double-float))))
    (let ((shifted nil))
      (sdet:make-effect (gui:sdet-context ui)
        (funcall subscribe-horz-drag-state)
        (yogalayout:node-style-set-position (gui:widget-yoga-node widget)
                                            yogalayout:+edge-left+
                                            (if (activity-tab-drag-horz-active horz-drag-state)
                                                (let* ((dragged-index (activity-tab-drag-horz-index horz-drag-state))
                                                       (dragged-widget (activity-tab-drag-horz-dragged-widget horz-drag-state))
                                                       (dragged-yoga-node (gui:widget-yoga-node dragged-widget)))
                                                  (if (eq widget dragged-widget)
                                                      (activity-tab-drag-horz-offset-x horz-drag-state)
                                                      (let ((widget-center (yoga-center-x (gui:widget-yoga-node widget))))
                                                        (cond
                                                         ((and (not shifted)
                                                               (> index dragged-index)
                                                               (> (+ (yogalayout:node-layout-get-left dragged-yoga-node)
                                                                     (yogalayout:node-layout-get-width dragged-yoga-node))
                                                                  widget-center))
                                                           (setf shifted :left))
                                                         ((and shifted
                                                               (> index dragged-index)
                                                               (< (yogalayout:node-layout-get-left dragged-yoga-node)
                                                                  widget-center))
                                                           (setf shifted nil))
                                                         ((and (not shifted)
                                                               (< index dragged-index)
                                                               (< (yogalayout:node-layout-get-left dragged-yoga-node)
                                                                  widget-center))
                                                           (setf shifted :right))
                                                         ((and shifted
                                                               (< index dragged-index)
                                                               (> (+ (yogalayout:node-layout-get-left dragged-yoga-node)
                                                                     (yogalayout:node-layout-get-width dragged-yoga-node))
                                                                  widget-center))
                                                           (setf shifted nil)))
                                                        (cond
                                                         ((eq :left shifted)
                                                           (- (gui:widget-width dragged-widget)))
                                                         ((eq :right shifted)
                                                           (gui:widget-width dragged-widget))
                                                         (t
                                                           0.0)))))
                                                (progn
                                                 (setf shifted nil)
                                                 0.0)))
        (values)))
    (setf (gui:widget-on-mouse-down-left widget)
      (lambda (ui widget x y other)
        (declare (ignore other))
        (funcall set-selected-index index)
        (gui:own-mouse ui widget)
        (setf (activity-tab-drag-horz-mouse-base-x horz-drag-state) x)
        (setf (activity-tab-drag-horz-mouse-base-y horz-drag-state) y)
        (setf (activity-tab-drag-horz-mouse-x horz-drag-state) x)
        (setf (activity-tab-drag-horz-mouse-y horz-drag-state) y)
        (setf (activity-tab-drag-horz-active horz-drag-state) t)
        (setf (activity-tab-drag-horz-index horz-drag-state) index)
        (setf (activity-tab-drag-horz-dragged-widget horz-drag-state) widget)
        (funcall notify-horz-drag-state)
        t))
    (setf (gui:widget-on-mouse-ownership-lost widget)
      (lambda (ui widget)
        (declare (ignore ui widget))
        (funcall stop-horz-drag nil nil)
        (values)))
    (setf (gui:widget-on-mouse-up-left widget)
      (lambda (ui widget x y other)
        (declare (ignore x y other))
        (when (eq widget (activity-tab-drag-horz-dragged-widget horz-drag-state))
              (gui:disown-mouse ui widget)
              (funcall stop-horz-drag nil nil)
              t)))
    (setf (gui:widget-on-mouse-move widget)
      (lambda (ui widget x y event)
        (when (eq widget (activity-tab-drag-horz-dragged-widget horz-drag-state))
              (if (>= (abs (- y (activity-tab-drag-horz-mouse-base-y horz-drag-state)))
                      +activity-drag-vert-break-threshold+)
                  (progn
                   (gui:disown-mouse ui widget)
                   (funcall stop-horz-drag t (%sdl3:mouse-motion-event.window-id event)))
                  (progn
                   (setf (activity-tab-drag-horz-mouse-x horz-drag-state) x)
                   (setf (activity-tab-drag-horz-mouse-y horz-drag-state) y)
                   (funcall notify-horz-drag-state)))
              t)))
    (setf (gui:widget-on-mouse-click-right widget)
      (lambda (ui widget x y other)
        (declare (ignore ui widget))
        (api:context-menu (%sdl3:mouse-button-event.window-id other)
                          x y
                          (vector (api:make-menu-item-button "Close" close)))
        t))
    ; (lambda ()
    ;   (gui:destroy-widget widget)
    ;   (values))
    (values)))

(defun make-activity-factory-menu (target)
  (let* ((app **app**))
    (labels ((make-items (node root)
                         (let* ((offset (if root 2 0))
                                (items (make-array (+ offset (length (activity-factory-tree-children node))))))
                           (when root
                                 (setf (svref items 0) "OPEN ACTIVITY")
                                 (setf (svref items 1) nil))
                           (loop #:for child #:across (activity-factory-tree-children node)
                                 #:for index #:from offset
                                 #:do (setf (svref items index) (make-item child)))
                           items))
             (make-item (node)
                        (let ((is-leaf (= 0 (length (activity-factory-tree-children node))))
                              (label (activity-factory-tree-label node))
                              (callback (unless (null (activity-factory-tree-value node))
                                          (lambda ()
                                            (vector-push-extend (create-activity app (activity-factory-tree-value node))
                                                                (observable-vector-values target))
                                            (funcall (observable-vector-notify target))
                                            (values)))))
                          (cond
                           ((and is-leaf callback)
                             (api:make-menu-item-button label callback))
                           (is-leaf
                             label)
                           (t
                             (api:make-menu-item-category label (make-items node nil) callback))))))
      (make-items (app-activity-factories app) t))))

(defun w-activity-tree-node (ui get-node set-node on-cleared set-layout)
  (gui:w-dynamic* ui
                  (lambda ()
                    (let ((sdet-ctx (gui:sdet-context ui))
                          (node (funcall get-node)))
                      (etypecase node
                        (null nil)
                        (activity-tree-node
                         (let ((on-cleared-low (lambda ()
                                                 (funcall set-node
                                                   (sdet:unobserved sdet-ctx
                                                     (funcall (activity-tree-node-get-high node))))
                                                 (values)))
                               (on-cleared-high (lambda ()
                                                  (funcall set-node
                                                    (sdet:unobserved sdet-ctx
                                                      (funcall (activity-tree-node-get-low node))))
                                                  (values))))
                           (gui:w-two-pane (:ui ui
                                                :axis (activity-tree-node-axis node)
                                                :threshold '(activity-tree-node-get-middle node)
                                                :on-threshold-changed '(activity-tree-node-set-middle node)
                                                :layout 'set-layout
                                                :separator-style #xFF777777
                                                :separator-thickness 2)
                                           (nil
                                            (w-activity-tree-node ui
                                                                  (activity-tree-node-get-low node)
                                                                  (activity-tree-node-set-low node)
                                                                  on-cleared-low
                                                                  (lambda (widget)
                                                                    (let ((ygn (gui:widget-yoga-node widget)))
                                                                      (yogalayout:node-style-set-flex-grow ygn 1.0))
                                                                    (values))))
                                           (nil
                                            (w-activity-tree-node ui
                                                                  (activity-tree-node-get-high node)
                                                                  (activity-tree-node-set-high node)
                                                                  on-cleared-high
                                                                  (lambda (widget)
                                                                    (let ((ygn (gui:widget-yoga-node widget)))
                                                                      (yogalayout:node-style-set-flex-grow ygn 1.0))
                                                                    (values))))))
                         ;  (gui:w-block* 'set-layout (:ui ui :let block)
                         ;    (let* ((block-ygn (gui:widget-yoga-node block))
                         ;           (on-cleared-low (lambda ()
                         ;                             (funcall set-node
                         ;                               (sdet:unobserved sdet-ctx
                         ;                                 (funcall (activity-tree-node-get-high node))))
                         ;                             (values)))
                         ;           (on-cleared-high (lambda ()
                         ;                              (funcall set-node
                         ;                                (sdet:unobserved sdet-ctx
                         ;                                  (funcall (activity-tree-node-get-low node))))
                         ;                              (values))))
                         ;      (if (eq :x (activity-tree-node-axis node))
                         ;          (progn
                         ;           (yogalayout:node-style-set-flex-direction block-ygn yogalayout:+flex-direction-row+)
                         ;           (w-activity-tree-node ui
                         ;                                 (activity-tree-node-get-low node)
                         ;                                 (activity-tree-node-set-low node)
                         ;                                 on-cleared-low
                         ;                                 (lambda (widget)
                         ;                                   (let ((ygn (gui:widget-yoga-node widget)))
                         ;                                     (yogalayout:node-style-set-flex-basis ygn 0.0)
                         ;                                     (yogalayout:node-style-set-flex-grow ygn (* 100.0 (funcall (activity-tree-node-get-middle node))))
                         ;                                     (yogalayout:node-style-set-height-percent ygn 100.0))
                         ;                                   (values)))
                         ;           (w-activity-separator ui node)
                         ;           (w-activity-tree-node ui
                         ;                                 (activity-tree-node-get-high node)
                         ;                                 (activity-tree-node-set-high node)
                         ;                                 on-cleared-high
                         ;                                 (lambda (widget)
                         ;                                   (let ((ygn (gui:widget-yoga-node widget)))
                         ;                                     (yogalayout:node-style-set-flex-basis ygn 0.0)
                         ;                                     (yogalayout:node-style-set-flex-grow ygn (* 100.0 (- 1.0 (funcall (activity-tree-node-get-middle node)))))
                         ;                                     (yogalayout:node-style-set-height-percent ygn 100.0))
                         ;                                   (values))))
                         ;          (progn
                         ;           (yogalayout:node-style-set-flex-direction block-ygn yogalayout:+flex-direction-column+)
                         ;           (w-activity-tree-node ui
                         ;                                 (activity-tree-node-get-low node)
                         ;                                 (activity-tree-node-set-low node)
                         ;                                 on-cleared-low
                         ;                                 (lambda (widget)
                         ;                                   (let ((ygn (gui:widget-yoga-node widget)))
                         ;                                     (yogalayout:node-style-set-flex-basis ygn 0.0)
                         ;                                     (yogalayout:node-style-set-width-percent ygn 100.0)
                         ;                                     (yogalayout:node-style-set-flex-grow ygn (* 100.0 (funcall (activity-tree-node-get-middle node)))))
                         ;                                   (values)))
                         ;           (w-activity-separator ui node)
                         ;           (w-activity-tree-node ui
                         ;                                 (activity-tree-node-get-high node)
                         ;                                 (activity-tree-node-set-high node)
                         ;                                 on-cleared-high
                         ;                                 (lambda (widget)
                         ;                                   (let ((ygn (gui:widget-yoga-node widget)))
                         ;                                     (yogalayout:node-style-set-flex-basis ygn 0.0)
                         ;                                     (yogalayout:node-style-set-width-percent ygn 100.0)
                         ;                                     (yogalayout:node-style-set-flex-grow ygn (* 100.0 (- 1.0 (funcall (activity-tree-node-get-middle node))))))
                         ;                                   (values)))))))
                         )
                        (observable-vector
                         (let ((horz-drag-state (make-activity-tab-drag-horz)))
                           (multiple-value-bind (subscribe-horz-drag-state notify-horz-drag-state)
                               (sdet:make-notifier sdet-ctx)
                             (multiple-value-bind (get-selected-index set-selected-index) (sdet:make-state sdet-ctx 0 :equal #'=)
                               (let* ((delete-activity-at (lambda (index)
                                                            (let ((activity (aref (observable-vector-values node) index)))
                                                              (setf (observable-vector-values node)
                                                                (gui::vector-delete activity (observable-vector-values node) :start index))
                                                              (let ((new-value-count (length (observable-vector-values node))))
                                                                (funcall (observable-vector-notify node))
                                                                (when (>= (sdet:unobserved sdet-ctx (funcall get-selected-index))
                                                                          new-value-count)
                                                                      (funcall set-selected-index (1- new-value-count)))
                                                                (when (= 0 new-value-count)
                                                                      (funcall on-cleared)))
                                                              activity)))
                                      (stop-horz-drag (lambda (broken window-id)
                                                        (if broken
                                                            (let* ((dragged-index (activity-tab-drag-horz-index horz-drag-state))
                                                                   (activity (funcall delete-activity-at dragged-index)))
                                                              (setf (activity-tab-drag-horz-dragged-widget horz-drag-state) nil)
                                                              (setf (activity-tab-drag-horz-active horz-drag-state) nil)
                                                              (funcall notify-horz-drag-state)
                                                              (api:start-dragging activity
                                                                                  nil
                                                                                  (lambda ()
                                                                                    (let* ((window (make-instance 'activities-window
                                                                                                     :gfx-backend-key (car (slot-value (api:activity-factory activity) 'api::gfx-backend-keys))))
                                                                                           (activities (slot-value window 'activities)))
                                                                                      (vector-push-extend activity (observable-vector-values activities))
                                                                                      (funcall (observable-vector-notify activities)))
                                                                                    (values))
                                                                                  :parent-window window-id))
                                                            (progn
                                                             (let* ((dragged-index (activity-tab-drag-horz-index horz-drag-state))
                                                                    (dragged-widget (activity-tab-drag-horz-dragged-widget horz-drag-state))
                                                                    (dragged-yoga-index (gui::widget-yoga-index dragged-widget))
                                                                    (dragged-yoga-node (gui:widget-yoga-node dragged-widget))
                                                                    (dragged-activity (aref (observable-vector-values node) dragged-index))
                                                                    (changed-vector nil)
                                                                    (parent-yoga-node (gui:widget-yoga-node (gui:widget-parent dragged-widget))))
                                                               (if (> (activity-tab-drag-horz-mouse-x horz-drag-state)
                                                                      (activity-tab-drag-horz-mouse-base-x horz-drag-state))
                                                                   (let ((activity-index (1+ dragged-index))
                                                                         (yoga-index (1+ dragged-yoga-index)))
                                                                     (loop #:while
                                                                           (and (< activity-index (length (observable-vector-values node)))
                                                                                (> (+ (yogalayout:node-layout-get-left dragged-yoga-node)
                                                                                      (yogalayout:node-layout-get-width dragged-yoga-node))
                                                                                   (yoga-center-x (yogalayout:node-get-child parent-yoga-node yoga-index))))
                                                                           #:do
                                                                           (setf changed-vector t)
                                                                           (setf (aref (observable-vector-values node) (1- activity-index))
                                                                             (aref (observable-vector-values node) activity-index))
                                                                           (incf activity-index)
                                                                           (incf yoga-index))
                                                                     (when changed-vector
                                                                           (funcall set-selected-index (1- activity-index))
                                                                           (setf (aref (observable-vector-values node) (1- activity-index))
                                                                             dragged-activity)))
                                                                   (let ((activity-index (1- dragged-index))
                                                                         (yoga-index (1- dragged-yoga-index)))
                                                                     (loop #:while
                                                                           (and (>= activity-index 0)
                                                                                (< (yogalayout:node-layout-get-left dragged-yoga-node)
                                                                                   (yoga-center-x (yogalayout:node-get-child parent-yoga-node yoga-index))))
                                                                           #:do
                                                                           (setf changed-vector t)
                                                                           (setf (aref (observable-vector-values node) (1+ activity-index))
                                                                             (aref (observable-vector-values node) activity-index))
                                                                           (decf activity-index)
                                                                           (decf yoga-index))
                                                                     (when changed-vector
                                                                           (funcall set-selected-index (1+ activity-index))
                                                                           (setf (aref (observable-vector-values node) (1+ activity-index))
                                                                             dragged-activity))))
                                                               (when changed-vector
                                                                     (funcall (observable-vector-notify node))))
                                                             (setf (activity-tab-drag-horz-dragged-widget horz-drag-state) nil)
                                                             (setf (activity-tab-drag-horz-active horz-drag-state) nil)
                                                             (funcall notify-horz-drag-state))))))
                                 (w-tabs '(lambda () (funcall (observable-vector-subscribe node)) (observable-vector-values node))
                                         get-selected-index
                                         set-selected-index
                                         (:ui ui
                                              :equal nil
                                              :container-layout 'set-layout
                                              :header-layout ((flex-direction yogalayout:+flex-direction-row+)
                                                              (width-percent 100.0)
                                                              (min-height 20.0))
                                              :header-visual ((gui:v-rectangle :fill-style (api:colors-background-focus ui)))
                                              :initialize-header (lambda (header)
                                                                   ; For testing. Moving doesn't work, not sure if it is a SDL3 problem.
                                                                   ;  (let ((tooltip nil))
                                                                   ;    (setf (gui:widget-on-mouse-enter header)
                                                                   ;      (lambda (ui widget x y other)
                                                                   ;        (setf tooltip (api:create-tooltip (%sdl3:mouse-motion-event.window-id other) x y "Hi!"))
                                                                   ;        (values)))
                                                                   ;    (setf (gui:widget-on-mouse-move header)
                                                                   ;      (lambda (ui widget x y other)
                                                                   ;        (api:move-tooltip tooltip x y)
                                                                   ;        (values)))
                                                                   ;    (setf (gui:widget-on-mouse-leave header)
                                                                   ;      (lambda (ui widget x y other)
                                                                   ;        (api:destroy-tooltip tooltip)
                                                                   ;        (setf tooltip nil)
                                                                   ;        (values))))
                                                                   (setf (gui:widget-on-mouse-click-right header)
                                                                     (lambda (ui widget x y other)
                                                                       (declare (ignore ui widget))
                                                                       (api:context-menu (%sdl3:mouse-button-event.window-id other)
                                                                                         x y
                                                                                         (make-activity-factory-menu node))
                                                                       t))
                                                                   (let ((dragdrop-active nil))
                                                                     (setf (gui:widget-on-drag-enter header)
                                                                       (lambda (ui widget x y)
                                                                         (declare (ignore widget x y))
                                                                         (setf dragdrop-active (typep (gui:dragged-value ui) 'api:activity))))
                                                                     (setf (gui:widget-on-drag-move header)
                                                                       (lambda (ui widget x y)
                                                                         (declare (ignore widget x y))
                                                                         (setf dragdrop-active (typep (gui:dragged-value ui) 'api:activity))))
                                                                     (setf (gui:widget-on-drag-leave header)
                                                                       (lambda (ui widget)
                                                                         (declare (ignore ui widget))
                                                                         (setf dragdrop-active nil)
                                                                         (values)))
                                                                     (setf (gui:widget-on-drag-drop header)
                                                                       (lambda (ui widget)
                                                                         (declare (ignore widget))
                                                                         (let ((activity (gui:dragged-value ui)))
                                                                           (when (typep activity 'api:activity)
                                                                                 (vector-push-extend activity (observable-vector-values node))
                                                                                 (funcall (observable-vector-notify node))
                                                                                 t))))
                                                                     (gui:append-children ui header (lambda (header)
                                                                                                      (declare (ignore header))
                                                                                                      (gui:w-block* ((margin yogalayout:+edge-vertical+ 4.0) (width 0.0)) (:ui ui :let dragdrop-visual)
                                                                                                        (setf (gui:widget-on-render-begin dragdrop-visual)
                                                                                                          (lambda (ui widget)
                                                                                                            (when dragdrop-active
                                                                                                                  (let ((rect (gui:alloc-blend2d-rect ui)))
                                                                                                                    (setf (%blend2d:rect.x rect) (coerce (gui:widget-yoga-x widget) 'double-float))
                                                                                                                    (setf (%blend2d:rect.y rect) (coerce (gui:widget-yoga-y widget) 'double-float))
                                                                                                                    (setf (%blend2d:rect.w rect) 2.0d0)
                                                                                                                    (setf (%blend2d:rect.h rect) (coerce (gui:widget-height widget) 'double-float))
                                                                                                                    (%blend2d:context-fill-rect-d-rgba32 (gui:layer-context (gui:current-layer ui)) rect #xFF888888)
                                                                                                                    (gui:free-blend2d-rect ui rect)))
                                                                                                            (values))))
                                                                                                      (values))))
                                                                   (values)))
                                         (activity index get-selected-index set-selected-index
                                                   (w-activity-tab ui activity index
                                                                   get-selected-index set-selected-index
                                                                   horz-drag-state subscribe-horz-drag-state notify-horz-drag-state
                                                                   stop-horz-drag (lambda ()
                                                                                    (destroy-activity **app** (funcall delete-activity-at index)))))
                                         (activity
                                          (when activity (w-activity ui activity (lambda (side)
                                                                                   (funcall set-node
                                                                                     (let ((new-node (make-observable-vector sdet-ctx)))
                                                                                       (vector-push-extend (gui:dragged-value ui) (observable-vector-values new-node))
                                                                                       (multiple-value-bind (axis low high)
                                                                                           (ecase side
                                                                                             (:left (values :x new-node node))
                                                                                             (:right (values :x node new-node))
                                                                                             (:top (values :y new-node node))
                                                                                             (:bottom (values :y node new-node)))
                                                                                         (make-activity-tree-node sdet-ctx axis low high))))
                                                                                   (values))))))))))))))))
