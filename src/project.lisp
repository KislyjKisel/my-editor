(in-package #:my-editor)

(defstruct (project-meta (:copier nil))
  (directory (gui::unreachable) :type list)
  (system "" :type string)
  (package "" :type string)
  (default-gfx-backend-key nil :type (or null keyword))
  (sdl-init-flags nil :type list)
  (register "" :type string))

(defstruct (project (:copier nil))
  (directory (gui::unreachable) :type list)
  (package (gui::unreachable) :type package)
  (default-gfx-backend-key nil :type symbol)
  (sdl-init-flags 0 :type (unsigned-byte 32))
  (register (gui::unreachable) :type function))

(defun read-project-meta (path)
  (with-open-file (file path)
    (let ((raw (read file)))
      (flet ((get-symbol (key)
                         (let ((s (getf raw key)))
                           (if (typep s 'symbol)
                               s
                               (error "Can't parse project metadata. Expected a symbol.")))))
        (make-project-meta :directory (pathname-directory (uiop:ensure-absolute-pathname path *default-pathname-defaults*))
                           :system (string (getf raw :system))
                           :package (string (getf raw :package))
                           :default-gfx-backend-key (get-symbol :default-gfx-backend-key)
                           :sdl-init-flags (getf raw :sdl-init-flags)
                           :register (string (getf raw :register)))))))

(defun load-project (project-meta-path)
  (let ((meta (read-project-meta project-meta-path)))
    (ql:quickload (project-meta-system meta) :promt nil :silent t)
    (let* ((package (find-package (project-meta-package meta))))
      (when (null package)
            (error "Couldn't find project's package: ~s" (project-meta-package meta)))
      ; (flet ((find-function (name)
      ;                       (unless name (return-from find-function nil))
      ;                       (let ((sym (find-symbol name package)))
      ;                         (when (null sym)
      ;                               (error "Couldn'y find project's symbol: ~s" name))
      ;                         (symbol-function sym))))
        (let ((sdl-init-flags-raw (project-meta-sdl-init-flags meta))
              (sdl-init-flags 0))
          (handler-case (dolist (flag-sym sdl-init-flags-raw)
                          (setf sdl-init-flags (logior sdl-init-flags (symbol-value flag-sym)))
                          (check-type sdl-init-flags (unsigned-byte 32)))
            (error (c)
              (format t "Bad project's SDL init flags (~s): ~a" (project-meta-sdl-init-flags meta) c)))
          (make-project :directory (project-meta-directory meta)
                        :package package
                        :default-gfx-backend-key (project-meta-default-gfx-backend-key meta)
                        :sdl-init-flags sdl-init-flags
                        :register (symbol-function (intern (project-meta-register meta) package)))))))
