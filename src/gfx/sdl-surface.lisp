(in-package #:my-editor)

(defstruct (gfx-sdl-surface (:copier nil)
                            (:constructor make-gfx-sdl-surface (surface)))
  (surface)
  (blend2d-image nil)
  (blend2d-pixel-converter)
  (blend2d-format-src)
  (blend2d-format-dst)
  (blend2d-image-data))

(defmethod api:gfx-initialize ((backend-key (eql :sdl-surface)) with-ui
                                                                &key
                                                                window-title window-width window-height window-flags
                                                                window-parent window-offset-x window-offset-y)
  (multiple-value-bind (raw-sdl-window px-width px-height)
      (create-raw-sdl-window window-title window-width window-height window-flags
                             window-parent window-offset-x window-offset-y)
    (let* ((state (make-gfx-sdl-surface (%sdl3:get-window-surface raw-sdl-window))))
      (if (not with-ui)
          (values state raw-sdl-window nil)
          (progn
           (setf (gfx-sdl-surface-blend2d-image state) (autowrap:alloc '%blend2d:image-core))
            (%blend2d:image-init-as (gfx-sdl-surface-blend2d-image state)
                                    (if (= 0 px-width) 1 px-width)
                                    (if (= 0 px-height) 1 px-height)
                                    %blend2d:+format-prgb32+)
           (let* ((format-dst (autowrap:alloc '%blend2d:format-info))
                  (surf-fmt (autowrap:wrap-pointer (%sdl3:surface.format (gfx-sdl-surface-surface state)) '%sdl3:pixel-format)))
             (setf (gfx-sdl-surface-blend2d-format-dst state) format-dst)
             (unless (format-sdl3->blend2d surf-fmt format-dst)
               (error "Couldn't create blend2d format info from SDL3 surface pixel format ~a" surf-fmt)))
           (setf (gfx-sdl-surface-blend2d-format-src state)
             (autowrap:alloc '%blend2d:format-info))
           (%blend2d:format-info-query (gfx-sdl-surface-blend2d-format-src state)
                                       %blend2d:+format-prgb32+)
           (setf (gfx-sdl-surface-blend2d-pixel-converter state)
             (autowrap:alloc '%blend2d:pixel-converter-core))
           (%blend2d:pixel-converter-init (gfx-sdl-surface-blend2d-pixel-converter state))
           (%blend2d:pixel-converter-create (gfx-sdl-surface-blend2d-pixel-converter state)
                                            (gfx-sdl-surface-blend2d-format-dst state)
                                            (gfx-sdl-surface-blend2d-format-src state)
                                            %blend2d:+pixel-converter-create-no-flags+)
           (setf (gfx-sdl-surface-blend2d-image-data state)
             (autowrap:alloc '%blend2d:image-data))
           (values
             state
             raw-sdl-window
             (gui:create-layer (gfx-sdl-surface-blend2d-image state))))))))

(defmethod api:gfx-resize ((state gfx-sdl-surface) window layer px-width px-height)
  (setf (gfx-sdl-surface-surface state) (%sdl3:get-window-surface window))
  (when layer
        (setf (gfx-sdl-surface-blend2d-image state)
          (gui:update-layer layer
                            (lambda ()
                              (%blend2d:image-reset (gfx-sdl-surface-blend2d-image state))
                              (%blend2d:image-create (gfx-sdl-surface-blend2d-image state)
                                                     (if (= 0 px-width) 1 px-width)
                                                     (if (= 0 px-height) 1 px-height)
                                                     %blend2d:+format-prgb32+)
                              (gfx-sdl-surface-blend2d-image state)))))
  (values))

(defmethod api:gfx-render ((state gfx-sdl-surface) window gui-layer render-content)
  ; (%sdl3:fill-surface-rect (gfx-sdl-surface-surface state) (cffi:null-pointer) 0)
  (declare (ignore render-content))
  (when gui-layer
        (%sdl3:lock-surface (gfx-sdl-surface-surface state))
        (%blend2d:image-get-data (gfx-sdl-surface-blend2d-image state)
                                 (gfx-sdl-surface-blend2d-image-data state))
        (%blend2d:pixel-converter-convert (gfx-sdl-surface-blend2d-pixel-converter state)
                                          (%sdl3:surface.pixels (gfx-sdl-surface-surface state))
                                          (%sdl3:surface.pitch (gfx-sdl-surface-surface state))
                                          (%blend2d:image-data.pixel-data (gfx-sdl-surface-blend2d-image-data state))
                                          (%blend2d:image-data.stride (gfx-sdl-surface-blend2d-image-data state))
                                          (%blend2d:image-data.size.w (gfx-sdl-surface-blend2d-image-data state))
                                          (%blend2d:image-data.size.h (gfx-sdl-surface-blend2d-image-data state))
                                          (cffi:null-pointer))
        (%sdl3:unlock-surface (gfx-sdl-surface-surface state)))
  (%sdl3:update-window-surface window)
  (values))

(defmethod api:gfx-terminate ((state gfx-sdl-surface) raw-sdl-window)
  (when (gfx-sdl-surface-blend2d-image state)
        (%blend2d:image-destroy (gfx-sdl-surface-blend2d-image state))
        (autowrap:free (gfx-sdl-surface-blend2d-image state))
        (%blend2d:pixel-converter-destroy (gfx-sdl-surface-blend2d-pixel-converter state))
        (autowrap:free (gfx-sdl-surface-blend2d-pixel-converter state))
        (autowrap:free (gfx-sdl-surface-blend2d-format-src state))
        (autowrap:free (gfx-sdl-surface-blend2d-format-dst state))
        (autowrap:free (gfx-sdl-surface-blend2d-image-data state)))
  (%sdl3:destroy-window raw-sdl-window)
  (values))
